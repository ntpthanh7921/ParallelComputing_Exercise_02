---
# This is a starting configuration for clang-tidy.
# Customize it based on your project's needs and coding standards.

# Define which checks to run. Use wildcards:
# - '*' enables all checks.
# - '-*' disables all checks initially.
# - 'category-*' enables all checks in a category.
# - '-category-unwantedcheck' disables a specific check within an enabled category.
Checks: >
  -* # Disable everything first
  ,bugprone-* # Enable checks for potential bugs
  ,clang-analyzer-* # Enable deeper static analysis checks (can be slow)
  ,modernize-* # Enable checks for modernizing C++ (C++11/14/17/20)
  ,performance-* # Enable checks for performance issues
  ,portability-* # Enable checks for portability issues across compilers/platforms
  ,readability-* # Enable checks related to code readability & maintainability
  ,-modernize-use-trailing-return-type # Often stylistic preference, disable if noisy
  ,-readability-identifier-naming # Disable complex naming checks by default, configure later if needed
  ,-readability-magic-numbers     # Can be noisy, enable cautiously if desired
  ,-readability-named-parameter   # Sometimes forces unnecessary verbosity

# Treat specific warnings as errors (optional). Add check names here.
# Example: WarningsAsErrors: 'bugprone-integer-division'
WarningsAsErrors: ""

# Control which headers are analyzed by clang-tidy.
# This regex matches headers within your 'include' directory.
# It avoids analyzing system headers or external library headers (like pybind11/googletest from FetchContent).
HeaderFilterRegex: "^include/.*"

# Analyze temporary destructors (usually a good idea).
AnalyzeTemporaryDtors: true

# If you also use .clang-format, clang-tidy can use its style settings for some checks.
FormatStyle: "file"
# Provide options for specific checks if needed.
# CheckOptions:
#   readability-identifier-naming.VariableCase: camelBack
#   modernize-loop-convert.MinConfidence: 'normal'
#   modernize-use-nullptr.NullMacros: 'NULL,CUSTOM_NULL'
